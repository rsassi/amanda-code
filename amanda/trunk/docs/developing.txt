Notes For Developers
====================

Adding Gnulib Modules
---------------------

Edit the clearly marked section in gnulib/regenerate/regenerate,
then re-run that script as directed below.

Updating Gnulib
---------------

This should probably be done after most releases, so that we have
adequate time to uncover any bugs or problems in the new gnulib before
we make another release.

To update the gnulib files included with Amanda, you'll first need a
CVS checkout of gnulib; let's call it $GNULIB_CO.  Then, in the root
of the Amanda source, run

  GNULIB_TOOL=$GNULIB_CO/gnulib-tool ./gnulib/regenerate/regenerate

Use 'svn status' to figure out what changed, and 'svn add' / 'svn rm'
to inform Subversion.  Then re-run autogen, configure, make, and test
the result.  If all is well, commit.

Updating Libtool
----------------

Libtool includes such useful files as config/config.guess.
Occasionally (probably right after a release), these files should be
updated.  On a machine with libtool installed, simply run 
  libtoolize --force --copy

Then use 'svn status' to see what changed, test it out, and commit.

Updating Gettext
----------------

The gettext library contains a significant number of files.  Assuming
you have the proper version of gettext installed, these files can be
updated by running

  po/reautopoint

and then adjusting as appropriate with 'svn add' / 'svn rm', testing,
and committing.  Note that this script post-processes the results of
autopoint rather extensively, and will probably need to be adjusted
for a new version of autopoint.

Checks
------

There are a few ways to automatically test parts of Amanda.

The simplest, 'make check', runs some basic tests within the build
directory.  This should succeed in any build directory.

All perl and shell scripts are automatically syntax checked.  You can
add new checks using the usual automake TESTS variable, or by adding
dependencies to check-local.

More complex tests, which require that Amanda be installed
somewhere, are invoked by 'make installcheck'.  These tests have a
few prerequisites:
 1. *Do not* run them on a production install, as they stomp around
    fairly indiscriminantly.  Packagers should resist the temptation
    to add 'make installcheck' to the list of steps in building a
    new package.
 2. The install must run as the current user.  This means that
    'dumpuser', --with-user, and --with-group must match the
    userid/groupid that runs 'make installcheck'.

Installchecks are implemented as perl scripts, run under Perl's
Test::Harness.  See the installcheck/ directory for the details.

Finally, 'make distcheck' is automake's swiss-army knife.  It basically
runs all of the possible tests against a newly-minted distribution
tarball.  Among its actions, it re-runs ./configure with the same
--with-user and --with-group settings as were supplied initially.
As such, it has the same requirements as installcheck.
